import cv
import Image
import numpy as np
import cv2



def angle_cos(p0, p1, p2):
    d1, d2 = (p0-p1).astype('float'), (p2-p1).astype('float')
    return abs( np.dot(d1, d2) / np.sqrt( np.dot(d1, d1)*np.dot(d2, d2) ) )

def find_squares(image):
    image = cv2.GaussianBlur(image, (5, 5), 0)
    squares = []
    for gray in cv2.split(image):
        for thrs in xrange(0, 255, 26):
            if thrs == 0:
                bin = cv2.Canny(gray, 0, 50, apertureSize=5)
                bin = cv2.dilate(bin, None)
            else:
                retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)
            contours, hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            for cnt in contours:
                cnt_len = cv2.arcLength(cnt, True)
                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)
                if len(cnt) == 4 and cv2.contourArea(cnt) > 1000 and cv2.isContourConvex(cnt):
                    cnt = cnt.reshape(-1, 2)
                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+2) % 4] ) for i in xrange(4)])
                    if max_cos < 0.1:
                        squares.append(cnt)
    return squares

def detect_painting(image):
    image = filtro(image)
    squares = find_squares(image)
    cv2.drawContours( image, squares, -1, (0, 255, 0), 3 )
    cv2.imshow('squares', image)
	
    #img = mascara(image)

def mascara(self,image):
    inicio = time()
        #Mascara Sobel
    sobelx = ([-1,0,1],[-2,0,2],[-1,0,1]) #gradiente horizontal
    sobely = ([1,2,1],[0,0,0],[-1,-2,-1]) # gradiente vertical    
    img=self.convolucion(sobelx,sobely,image)
    fin=time()
    tiempo_t = fin - inicio
        #print "Tiempo que tardo en ejecutarse convolucion = "+str(tiempo_t)+" segundos"

    return img
    
    def convolucion(self,h1,h2,image):
        pixels = image.load()
        ancho,alto = image.size 
        a=len(h1[0])
        self.conv = numpy.empty((ancho, alto))
        self.gx=numpy.empty((ancho, alto))
        self.gy=numpy.empty((ancho, alto))
        self.minimo = 255
        self.maximo = 0
        for x in range(ancho):
            for y in range(alto):
                sumax = 0.0
                sumay = 0.0
                for i in range(a): 
                    for j in range(a): 
                        try:
                            sumax +=(pixels[x+i,y+j][0]*h1[i][j])
                            sumay +=(pixels[x+i,y+j][0]*h2[i][j])

                        except:
                            pass
                gradiente = math.sqrt(pow(sumax,2)+pow(sumay,2))
                self.conv[x,y]=gradiente
                self.gx[x,y]=sumax
                self.gy[x,y]=sumay
                gradiente = int(gradiente)
                pixels[x,y] = (gradiente,gradiente,gradiente)
                p = gradiente
                if p < self.minimo:
                    self.minimo = p
                if  p > self.maximo:
                    self.maximo = p
       # print 'gx-------------',self.gx
       # print 'gy-------------',self.gy
        return image

    def normalizar(self,image):
        inicio=time()
        pixels = image.load()
        r = self.maximo-self.minimo
        prop = 255.0/r
        ancho,alto = image.size
        for i in range(ancho):
            for j in range(alto):
                p =int(floor((self.conv[i,j]-self.minimo)*prop))
                pixels[i,j]=(p,p,p);
       # print 'TERMINO'
        fin = time()
        tiempo_t = fin - inicio
       # print "Tiempo que tardo en ejecutarse normalizar = "+str(tiempo_t)+" segundos"

        return image


    def binarizar(self,img):
        inicio = time()
        pixels = img.load()
        ancho,alto = img.size
        minimo = int(argv[2])
        for i in range(ancho):
            for j in range(alto):
                if pixels[i,j][1] < minimo:
                    p=0
                else:
                    p= 255
                pixels[i,j]=(p,p,p)
        fin  =time()
        tiempo_t = fin - inicio
       # print "Tiempo que tardo en ejecutarse binzarizar = "+str(tiempo_t)+" segundos"

        return img

def filtro(image):
    image,matriz = escala_grises(image)
    pixels = image.load()
    ancho, alto =image.size
    lista = [-1,0,1]
    for i in range(ancho):
        for j in range(alto):
            promedio = vecindad(i,j,lista,matriz)
            pixels[i,j] = (promedio,promedio,promedio)
    image.save('FILTRO.png')
    return image

def escala_grises(image):
    image = Image.open(image) 
    pixels = image.load()
    ancho,alto = image.size
    matriz = np.empty((ancho, alto))
    for i in range(ancho):
        for j in range(alto):
            (r,g,b) = image.getpixel((i,j))
            escala = (r+g+b)/3
            pixels[i,j] = (escala,escala,escala)
            matriz[i,j] = int(escala)
    df = image.save('escala.png')
    return image,matriz 

    
def vecindad(i,j,lista,matriz):
    promedio = 0
    indice  = 0
    for x in lista:
        for y in lista:
            a = i+x
            b = j+y
            try:
                if matriz[a,b] and (x!=a and y!=b):
                    promedio += matriz[a,b] 
                    indice +=1            
            except IndexError:
                pass
            try:
                promedio=int(promedio/indice)
                return promedio
            except ZeroDivisionError:
                return 0
  

def main():
    cam=cv.CaptureFromCAM(0)
    while True:
        im =cv.QueryFrame(cam)
        snapshot = im
        image_size = cv.GetSize(snapshot)
        cv.SaveImage("test.png",im)
        imagen=cv.CreateImage(image_size,cv.IPL_DEPTH_8U,3)
        detect_painting("test.png")
        cv.ShowImage('Camara', snapshot)
        if cv.WaitKey(30)==27:
            break

 		

main()
